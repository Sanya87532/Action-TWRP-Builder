name: Recovery Build

on:
  workflow_dispatch:
    inputs:
      MANIFEST_URL:
        description: 'Manifest URL (use HTTPS)'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp'
      MANIFEST_BRANCH:
        description: 'Manifest branch'
        required: true
        default: 'twrp-12.1'
      DEVICE_TREE_URL:
        description: 'Device tree URL (use HTTPS)'
        required: true
        default: 'https://github.com/TeamWin/android_device_asus_I003D'
      DEVICE_TREE_BRANCH:
        description: 'Device tree branch'
        required: true
        default: 'android-12.1'
      DEVICE_PATH:
        description: 'Device path'
        required: true
        default: 'device/asus/I003D'
      COMMON_TREE_URL:
        description: 'Common tree URL (optional, use HTTPS)'
        required: false
      COMMON_PATH:
        description: 'Common path'
        required: false
      DEVICE_NAME:
        description: 'Device name'
        required: true
        default: 'I003D'
      MAKEFILE_NAME:
        description: 'Makefile name'
        required: true
        default: 'twrp_I003D'
      BUILD_TARGET:
        description: 'Build target'
        required: true
        default: 'recovery'

jobs:
  build:
    runs-on: self-hosted
    env:
      USE_CCACHE: 0
      MAKEFLAGS: -j4
      BUILD_WITH_COLORS: true

    steps:
    - name: Display Run Parameters
      run: |
        echo "Manifest URL: ${{ github.event.inputs.MANIFEST_URL }}"
        echo "Manifest Branch: ${{ github.event.inputs.MANIFEST_BRANCH }}"
        echo "Device Tree URL: ${{ github.event.inputs.DEVICE_TREE_URL }}"
        echo "Device Tree Branch: ${{ github.event.inputs.DEVICE_TREE_BRANCH }}"
        echo "Device Path: ${{ github.event.inputs.DEVICE_PATH }}"
        echo "Device Name: ${{ github.event.inputs.DEVICE_NAME }}"
        echo "Makefile Name: ${{ github.event.inputs.MAKEFILE_NAME }}"
        echo "Build Target: ${{ github.event.inputs.BUILD_TARGET }}.img"

    - name: Clean Disk and Prepare APT
      run: |
        echo "🧹 Cleaning up disk space..."
        # Ждём пока освободится apt lock
        timeout=120
        waited=0
        while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
              sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
              sudo fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
          if [ $waited -ge $timeout ]; then
            echo "⚠️  Timeout reached — force unlocking apt..."
            sudo killall apt apt-get dpkg || true
            sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
            sudo dpkg --configure -a || true
            break
          fi
          echo "Waiting for apt lock to be released... ($waited seconds)"
          sleep 5
          waited=$((waited+5))
        done

        # После ожидания — очистка
        sudo killall apt apt-get dpkg || true
        sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
        sudo dpkg --configure -a

        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /opt/hostedtoolcache
        sudo apt-get clean
        df -h
        
    - name: Install Build Dependencies
      run: |
        echo "🧩 Checking for apt locks..."
        timeout=120
        waited=0
        while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
              sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
              sudo fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
          if [ $waited -ge $timeout ]; then
            echo "⚠️  Timeout reached — force unlocking apt..."
            sudo killall apt apt-get dpkg || true
            sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock
            sudo dpkg --configure -a || true
            break
          fi
          echo "Waiting for apt lock to be released... ($waited seconds)"
          sleep 5
          waited=$((waited+5))
        done

        echo "✅ APT lock cleared, proceeding with installation..."
        sudo apt update -y
        sudo DEBIAN_FRONTEND=noninteractive apt install -y \
          git curl wget unzip zip python3 python3-pip bc bison build-essential ccache \
          flex g++-multilib gcc-multilib lib32ncurses-dev lib32z1-dev libncurses5-dev \
          libncursesw5-dev libssl-dev libelf-dev x11proto-core-dev libx11-dev tree \
          libgl1-mesa-dev libxml2-utils xsltproc libc6-dev liblz4-tool libsdl1.2-dev \
          libgtk-3-dev libglu1-mesa-dev freeglut3-dev lzop pngcrush schedtool \
          squashfs-tools imagemagick libbz2-dev lzma ncftp qemu-user-static \
          libstdc++-10-dev libncurses6 tar rustc cargo libgflags-dev
          
    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Install repo tool
      run: |
        mkdir -p ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Initialize repo
      id: init
      run: |
        mkdir -p workspace
        cd workspace
        git config --global user.name "AutoBuilder"
        git config --global user.email "autobuild@users.noreply.github.com"
        repo init --depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT

    - name: Repo Sync
      run: repo sync -j4 --force-sync --no-tags --current-branch || repo sync -j1 --force-sync
      working-directory: workspace

    - name: Clone Device Tree
      run: |
        rm -rf ./${{ github.event.inputs.DEVICE_PATH }}
        git clone ${{ github.event.inputs.DEVICE_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}
      working-directory: workspace

    - name: Clone Common Tree
      if: ${{ github.event.inputs.COMMON_TREE_URL && github.event.inputs.COMMON_PATH }}
      run: |
        git clone ${{ github.event.inputs.COMMON_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.COMMON_PATH }}
      working-directory: workspace

    - name: Sync Device Dependencies
      run: |
        bash ${GITHUB_WORKSPACE}/scripts/convert.sh ${{ github.event.inputs.DEVICE_PATH }}/twrp.dependencies || true
        repo sync -j4 || true
      working-directory: workspace
      continue-on-error: true

    - name: Ensure libgflags exists
      run: |
        EXTERNAL_DIR="${{ github.workspace }}/workspace/external"
        mkdir -p "$EXTERNAL_DIR"
        if [ ! -d "$EXTERNAL_DIR/libgflags" ]; then
          echo "🔧 Cloning missing libgflags..."
          git clone https://github.com/gflags/gflags.git "$EXTERNAL_DIR/libgflags"
        else
          echo "✅ libgflags already exists."
        fi
      working-directory: workspace

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Disable snapuserd (workaround for missing libgflags)
      run: |
        echo "🩹 Disabling snapuserd to fix libgflags dependency issue..."
        cd system/core/fs_mgr/libsnapshot || exit 0
        sed -i '/snapuserd/d' Android.bp || true
        sed -i '/libgflags/d' Android.bp || true
        find . -type f -name 'Android.bp' -exec grep -H snapuserd {} \; || true
        echo "✅ snapuserd disabled successfully."
      working-directory: workspace

    - name: Check envsetup
      run: |
        echo "📁 Current directory: $(pwd)"
        if [ -f build/envsetup.sh ]; then
          echo "✅ envsetup.sh found!"
        else
          echo "❌ envsetup.sh not found!"
          exit 1
        fi
      working-directory: workspace

    - name: Build TWRP
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python || true
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ github.event.inputs.MAKEFILE_NAME }}-eng
        mka clean
        mka -k -v ${{ github.event.inputs.BUILD_TARGET }}image 2>&1 | tee build_log.txt
      working-directory: workspace

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        path: |
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.img
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/build_log.txt
